func matchWildcard(pattern, str string) (bool, error) {
	return filepath.Match(pattern, str)
}

func create(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	value, _ := vars["blogpost"];
	pattern := "blogpost=*"

	match, _ := matchWildcard(pattern, value)

	if match {
		parts := strings.Split(value, "=")
		if len(parts) == 2 {
			name := parts[0]
			data := parts[1]

			if data == "" {
				fmt.Fprintf(w, "%s", "Invalid or missing 'blogpost number' parameter in the URL path (value=?)")
				return
			} else {

				blog_post, err := strconv.Atoi(data)
				if err != nil {
					fmt.Fprintf(w, "Error converting 'blogpost' parameter to integer: %s", err)
					return
				}

				db, err := connect()
				if err != nil {
					return
				}
				defer db.Close()

				if _, err := db.Exec("INSERT INTO blog (title) VALUES ($1);", fmt.Sprintf("Blog post #%d", blog_post)); err == nil {
					fmt.Fprintf(w, "Received name: %s, value: %d", name, blog_post)
					return
				}
			}
			return
		}
		return
	} else {
		fmt.Fprintf(w, "%s", "Invalid or missing 'blogpost' parameter in the URL path")
		return
	}
}



?
--------------------------------

package main

import (
	"database/sql"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"
	"strconv"
	"encoding/json"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	_ "github.com/lib/pq"

)

func connect() (*sql.DB, error) {
	bin, err := ioutil.ReadFile("/run/secrets/db-password")
	if err != nil {
		return nil, err
	}
	return sql.Open("postgres", fmt.Sprintf("postgres://postgres:%s@db:5432/example?sslmode=disable", string(bin)))
}

func root(w http.ResponseWriter, r *http.Request) {
	message := "Hello, welcome to my API database!"
	fmt.Fprintf(w, "%s", message)
}

func notFound(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotFound)
	fmt.Fprintf(w, "404 Not Found: %s", r.URL.Path)
}

func create(w http.ResponseWriter, r *http.Request) {

	vars := mux.Vars(r)
	value := vars["blogpost"];

	blog_post, err := strconv.Atoi(value)
	if err != nil {
		fmt.Fprintf(w, "Error converting 'blogpost' parameter to integer: %s", err)
		return
	}

	db, err := connect()
	if err != nil {
		return
	}
	defer db.Close()

	if _, err := db.Exec("INSERT INTO blog (title) VALUES ($1);", fmt.Sprintf("Blog post #%d", blog_post)); err == nil {
		fmt.Fprintf(w, "Blog post #%d is added successfully", blog_post)
		return
	}

}

func read(w http.ResponseWriter, r *http.Request) {
	db, err := connect()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	defer db.Close()

	rows, err := db.Query("SELECT title FROM blog")
	if err != nil {
		w.WriteHeader(500)
		return
	}
	var titles []string
	for rows.Next() {
		var title string
		err = rows.Scan(&title)
		titles = append(titles, title)
	}
	json.NewEncoder(w).Encode(titles)
}

func update(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id := vars["id"]
    newTitle := vars["blogpost"]
	

    idValue, err := strconv.Atoi(id)
    if err != nil {
        fmt.Fprintf(w, "Error converting 'id' parameter to integer: %s", err)
        return
    }

	title, err := strconv.Atoi(newTitle)
    if err != nil {
        fmt.Fprintf(w, "Error converting 'id' parameter to integer: %s", err)
        return
    }

    db, err := connect()
    if err != nil {
        fmt.Fprintf(w, "Error connecting to the database: %s", err)
        return
    }
    defer db.Close()

    if _, err := db.Exec("UPDATE blog SET title=$1 WHERE id=$2", fmt.Sprintf("Blog post #%d", title), idValue); err != nil {
        fmt.Fprintf(w, "Error updating data in the database: %s", err)
        return
    }

    fmt.Fprintf(w, "Updated blog post ID %d with the new title %s successfully", idValue, newTitle)
}

func delete(w http.ResponseWriter, r *http.Request) {
    vars := mux.Vars(r)
    id := vars["id"]
	

    idValue, err := strconv.Atoi(id)
    if err != nil {
        fmt.Fprintf(w, "Error converting 'id' parameter to integer: %s", err)
        return
    }

    db, err := connect()
    if err != nil {
        fmt.Fprintf(w, "Error connecting to the database: %s", err)
        return
    }
    defer db.Close()

    if _, err := db.Exec("DELETE FROM blog WHERE id=$1", idValue); err != nil {
        fmt.Fprintf(w, "Error deleting data in the database: %s", err)
        return
    }

    fmt.Fprintf(w, "Deleted blog post ID %d successfully", idValue)
}

func main() {
	log.Print("Prepare db...")
	if err := prepare(); err != nil {
		log.Fatal(err)
	}

	log.Print("Listening 8000")
	r := mux.NewRouter()

	// Routing to CRUD
	r.HandleFunc("/", root)
	r.HandleFunc("/read", read)
	r.HandleFunc("/create/{blogpost}", create)
	r.HandleFunc("/update/{id}/{blogpost}", update)
	r.HandleFunc("/delete/{id}", delete)

	//404
	r.NotFoundHandler = http.HandlerFunc(notFound)

	log.Fatal(http.ListenAndServe(":8000", handlers.LoggingHandler(os.Stdout, r)))
}

func prepare() error {
	db, err := connect()
	if err != nil {
		return err
	}
	defer db.Close()

	for i := 0; i < 60; i++ {
		if err := db.Ping(); err == nil {
			break
		}
		time.Sleep(time.Second)
	}

	if _, err := db.Exec("DROP TABLE IF EXISTS blog"); err != nil {
		return err
	}

	if _, err := db.Exec("CREATE TABLE IF NOT EXISTS blog (id SERIAL, title VARCHAR)"); err != nil {
		return err
	}

	if _, err := db.Exec("CREATE TABLE IF NOT EXISTS human (id SERIAL, name VARCHAR, lastname VARCHAR)"); err != nil {
		return err
	}

	for i := 0; i < 5; i++ {
		if _, err := db.Exec("INSERT INTO blog (title) VALUES ($1);", fmt.Sprintf("Blog post #%d", i)); err != nil {
			return err
		}
	}
	return nil
}